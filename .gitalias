[alias]
    a = add -A
    u = add -u
    b = branch
    bc = branch --contains
    bC = branch -r --contains
    bcr = branch -r --contains
    f = fetch
    fa = fetch --all --prune
    m = merge
    s = status
    st = status
    ci = commit
    cin = commit --no-edit
    ca = commit --amend
    can = commit --amend --no-edit
    co = checkout
    cm = checkout -m
    cp = cherry-pick
    cpa = cherry-pick --abort
    cpc = cherry-pick --continue
    cb = "!f() {\
            b=$(find $(git rev-parse --git-dir)/refs/remotes/origin \\( -name master -o -name main \\) -printf "%f\n");\
            git checkout -b $1 origin/$b;\
        };f"
    cbr = "!f() {\
            gerrit_create_branch origin $1 master;\
        };f"
    cbs = "!f() {\
            git cbr $1;\
            git cb $1;\
        };f"
    cu = "!f() {\
            git fetch; \
            git checkout -B $1 origin/$1;\
        };f"
    l = !do_git_log $@
    ls = log --oneline
    lf = log --name-status
    gdiff = difftool -g -d
    gwdiff = difftool --tool=winmerge -d
    wdiff = difftool --tool=winmerge
    yolo = push -f
    rpm = rebase --preserve-merges
    rev = "!f() {\
            gerrit_push_review $1; \
        };f"
    alias = "!f() {\
            if [ -z $1 ] || [ -z $2 ]; \
            then \
                git config --get-regexp alias; \
                echo '\nTo make alias: git alias <alias> <command>'; \
            else \
                git config --global alias.$1 $2; \
            fi; \
        };f"
    l = !do_git_log
    ri = "!f() {\
            if [ -z "$1" ]; then \
                git rebase -i origin/master; \
            else \
                git rebase -i "$@"; \
            fi; \
        };f"
    rc = rebase --continue
    ra = rebase --abort
    pex = "!f() {\
            if [ -z "$1" ]; then \
                echo "Usage: pex NUM_COMMITS"; \
                echo -"     Where NUM_COMMITS is how many commits back from head"; \
                return 1; \
            fi; \
            rb=$(git for-each-ref --format='%(upstream:short)' "$(git symbolic-ref -q HEAD)" | cut -d "/" -f 2-); \
            git push origin HEAD~$1:$rb; \
        };f"
    mt = mergetool
    why = check-ignore --verbose --non-matching
    recent = "!r() {\
            refbranch=$1 \
            count=$2; \
            git for-each-ref --sort=-committerdate refs/heads \
                --format='%(refname:short)|%(HEAD)%(color:yellow)%(refname:short)|%(color:bold green)%(committerdate:relative)|%(color:blue)%(subject)|%(color:magenta)%(authorname)%(color:reset)' \
                --color=always --count=${count:-20} | \
                while read line; do \
                    branch=$(echo \"$line\" | awk 'BEGIN { FS = \"|\" }; { print $1 }' | tr -d '*'); \
                    ahead=$(git rev-list --count \"${refbranch:-origin/master}..${branch}\"); \
                    behind=$(git rev-list --count \"${branch}..${refbranch:-origin/master}\"); \
                    colorline=$(echo \"$line\" | sed 's/^[^|]*|//'); echo \"$ahead|$behind|$colorline\" | awk -F'|' -vOFS='|' '{$5=substr($5,1,70)}1' ; \
                done | \
                ( echo \"ahead|behind||branch|lastcommit|message|author\\n\" && cat) | \
                column -ts'|'; \
        };r"
    history = "!r() {\
        index=$((${1:-10}+1)); \
        git reflog | \
        grep \"checkout: moving from\" | \
        cut -d ' ' -f 8 | \
        sed \"${index}q\" | \
        nl -v0 | \
        sed '1s/ 0\t/ -\t/'; \
        };r"
    back = "!r() {\
        index=$((${1:-0}+1)); \
        branch=$(git reflog | \
        grep \"checkout: moving from\" | \
        cut -d ' ' -f 8 | \
        sed \"${index:-1}q;d\"); \
        git checkout $branch; \
        };r"
    prev = "!r() {\
        branch=$(git reflog | \
        grep \"checkout: moving from\" | \
        cut -d ' ' -f 8 | \
        sed '2q;d'); \
        git checkout $branch; \
        };r"

