[alias]
    a = add -A
    u = add -u
    b = branch
    bc = branch --contains
    bC = branch -r --contains
    bcr = branch -r --contains
    f = fetch
    fa = fetch --all --prune
    m = merge
    s = status
    st = status
    ci = commit
    cin = commit --no-edit
    ca = commit --amend
    can = commit --amend --no-edit
    co = checkout
    cm = checkout -m
    cp = cherry-pick
    cb = "!f() {\
            b=$(find $(git rev-parse --git-dir)/refs/remotes/origin \\( -name master -o -name main \\) -printf "%f\n");\
            git checkout -b $1 origin/$b;\
        };f"
    cbr = "!f() {\
            gerrit_create_branch origin $1 master;\
        };f"
    cbs = "!f() {\
            git cbr $1;\
            git cb $1;\
        };f"
    cu = "!f() {\
            git fetch; \
            git checkout -B $1 origin/$1;\
        };f"
    l = !do_git_log $@
    ls = log --oneline
    lf = log --name-status
    gdiff = difftool -g -d
    gwdiff = difftool --tool=winmerge -d
    wdiff = difftool --tool=winmerge
    yolo = push -f
    rpm = rebase --preserve-merges
    rev = "!f() {\
            gerrit_push_review $1; \
        };f"
    alias = "!f() {\
            if [ -z $1 ] || [ -z $2 ]; \
            then \
                git config --get-regexp alias; \
                echo '\nTo make alias: git alias <alias> <command>'; \
            else \
                git config --global alias.$1 $2; \
            fi; \
        };f"
    l = !do_git_log
    ri = "!f() {\
            if [ -z "$1" ]; then \
                rebase -i origin/master; \
            else \
                rebase -i "$@"; \
            fi; \
        };f"
    pex = "!f() {\
            if [ -z "$1" ]; then \
                echo "Usage: pex NUM_COMMITS"; \
                echo -"     Where NUM_COMMITS is how many commits back from head"; \
                return 1; \
            fi; \
            git push origin HEAD~$1:master; \
        };f"

