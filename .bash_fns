#!/bin/bash

# Idempotent fn to add dir to $PATH
add_to_PATH () {
    for d; do
        d=$(cd -- "$d" && { pwd -P || pwd;  }) 2>/dev/null  # canonicalize symbolic links
        if [ -z "$d"  ]; then continue; fi  # skip nonexistent directory

        case ":$PATH:" in
            *":$d:"*) :;;
            *) export PATH=$PATH:$d;;
        esac
    done
}

findd() {
    find . -type d | grep "$1"
}

findf() {
    find . -type f | grep "$1"
}

xrm() {
    xargs rm -r
}

# Docker functions
if which docker >> /dev/null; then
    dsh() {
        image=$1
            shift
            docker run -it $image /bin/sh "$@"
    }

    dash() {
        image=$1
            shift
            docker run -it $image /bin/bash "$@"
    }

    drun() {
        docker run "$@"
    }

    drm() {
        docker image rm -f $1
    }

    dmake() {
        docker build . -t $1
    }
fi;

# Kubernetes functions
if which kubectl >> /dev/null; then
    kbin() {
        kpath=/opt/kafka/current/bin
        kscripts=/Users/jared/Projects/mono/utils/kafka

        binary=$1
        shift

        case $binary in
        ls)
            find $kscripts $kpath -type f -depth 1 -perm +111 | xargs basename
            ;;
        *)
            export PATH=$kscripts:$kpath:$PATH
            $binary "$@"
            ;;
        esac
    }

    kexec() {
        [ -z ${1} ] && echo "No target specified" && return 1
        exe=${2:-/bin/bash}
        PS3="Pod to exec $exe in: "
        select pod in $(kubectl get pods | grep $1 | cut -d ' ' -f 1); do
            kubectl exec -it ${pod} -- ${exe}
            return 0
        done
    }

    klog() {
        PS3="Pod to get logs from: "

        select pod in $(kubectl get pods | tail -n +2 | grep "$1" | cut -d ' ' -f 1); do
            shift
            kubectl logs "$@" $pod
            return 0
        done
    }

    kls() {
        if [ -z ${1:+1} ]; then
            kubectl get pods
        else
            kubectl get pods | grep ${1}
        fi
    }

    kcp() {
        kubectl cp $1 $2
    }

    kdel() {
        PS3="Pod to restart: "

        select pod in $(kubectl get pods | tail -n +2 | grep "$1" | cut -d ' ' -f 1); do
            kubectl delete pod/$pod
            return 0
        done
    }
fi
